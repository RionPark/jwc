1.접근제어자의 범위를 큰순서에 맞게 나열한것은? 	 3
 1) protected>public>default>private		
 2) private>default>protected>public		
 3) public>protected>default>private		
 4) public>default>protected>private		
		
2. 다음중 오버라이딩의 설명으로 틀린 것은? 		1
 1) 접근제어자를 상위 클래스보다 더 작은 범위로 만들수 있다.	- 무조건 public 	
 2) 리턴타입은 상관이 없다.		
 3) 파라메터의 갯수와 상관이 없다.		
 4) 오버라이딩은 상속에서만 가능한 개념이다.		
 		
3. 오버로딩의 정의를 서술해주세요.?		
오버로딩은 같은 영역 안에서만 사용 가능하고 파라미터의 개수, 파라미터의 데이터 타입이 다르면 오버로딩이다.
하지만 파라미터의 개수가 같다고 하더라도 파라미터의 순서가 다르다면 오버로딩이라고 할 수 있다. (int a, String b) - (String a , int b)는 다른 것이다.

 

		
interface Car{		
}		
class Kia implements Car{		
}		
class Hyundai implements Car{		
}		

5. 위의 코드를 보고 아래의 보기중에 오류가 나는것을 고르시오.	4	
   1. Car c = new Kia();o		
   2. Car c = new Hyundai();	o	
   3. Car c = new Car();	o	
   4. Kia k = new Hyundai();		
		
6. 모든 클래스가 상속받는 클래스를 작성해주세요[     object   ]  		
		

 - 아래의 실행결과를 작성해주세요.		
class Exam{		
	public static void main(String[] args){	
		System.out.println("123"=="123"); 	------- true 변수로 주소값을 받은 게 아니고 값만이라 true..? 잘은 모르겠지만 true 같습니다.
		System.out.println("123".equals("123"); ------- true
	}	
}		






7.      전체를 수정해서 작성했습니다.

class Robot{		
	public void shoot()	{	
		System.out.println("로봇의 슈팅");
			}	
		
class Gundam extends Robot {		
	public void shoot()	{	
		System.out.println("건담의 슈팅");
			}
	}

	public static void main(여기!!!!!!String args[]){	
		Gundam gun = new Gundam();
		gun.shoot();
	}	
}		


     		
8. [	 String[]  args        ]
 - 아래의 코드를 보고 올바른답을 서술하시오.		
class Robot{		
	void shoot(){	
		System.out.println("로봇의 슈팅");
	}	
}		
class Gundam extends Robot{		
	void shoot(){	
		System.out.println("건담의 슈팅");
	}	


	public static void main(여기!!!!!!String args[]){	
		Gundam gun = new Gundam();
		gun.shoot();
	}	
}		



9. Gundam의 shoot()메소드는 현재 오버라이딩 된것인가 오버로딩 된것인가?		- 오버라이딩
		
10. 위코드의 실행결과를 작성해주세요.[    제대로 되면 건담의 슈팅이 나오겠지만 영역이 제대로 설정이 안 돼서 컴파일 오류가 날 것 같습니다.            ]		
